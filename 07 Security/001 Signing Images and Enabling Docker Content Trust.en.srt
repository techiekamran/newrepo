1
00:00:00,300 --> 00:00:01,940
Hello, and welcome to this lesson

2
00:00:01,940 --> 00:00:06,090
on signing images and enabling Docker Content Trust.

3
00:00:06,090 --> 00:00:09,720
Docker Content Trust is essentially a feature of Docker

4
00:00:09,720 --> 00:00:14,270
that provides us a way to sign our container images.

5
00:00:14,270 --> 00:00:17,050
From a security standpoint, if you're going to be running

6
00:00:17,050 --> 00:00:19,570
any kind of software in your systems,

7
00:00:19,570 --> 00:00:22,120
it's important to be able to verify

8
00:00:22,120 --> 00:00:26,590
that that software hasn't been tampered with by an attacker.

9
00:00:26,590 --> 00:00:28,950
So in the non-container world,

10
00:00:28,950 --> 00:00:33,050
you'll often find various mechanisms for signing software

11
00:00:33,050 --> 00:00:36,700
basically providing some kind of signature or certificate

12
00:00:36,700 --> 00:00:39,660
to certify the integrity of that software

13
00:00:39,660 --> 00:00:42,980
and the same holds true when it comes to Docker containers.

14
00:00:42,980 --> 00:00:46,470
So with Docker Content Trust, essentially what happens

15
00:00:46,470 --> 00:00:51,470
is the image creator generates a certificate or signature,

16
00:00:51,530 --> 00:00:53,780
which can then be used to validate

17
00:00:53,780 --> 00:00:56,270
that the image has not been tampered with

18
00:00:56,270 --> 00:00:59,060
before running it on our system.

19
00:00:59,060 --> 00:01:02,140
Typically this certificate and signature data

20
00:01:02,140 --> 00:01:06,660
is stored right alongside the image in a Docker registry.

21
00:01:06,660 --> 00:01:09,717
So we can sign the image, we can push the image

22
00:01:09,717 --> 00:01:12,160
and the signature data to the registry

23
00:01:12,160 --> 00:01:14,630
and then when we or anyone else

24
00:01:14,630 --> 00:01:16,890
goes to pull or run that image,

25
00:01:16,890 --> 00:01:18,920
that signature data can be used

26
00:01:18,920 --> 00:01:23,150
to verify the integrity of the image before running it.

27
00:01:23,150 --> 00:01:24,370
So the first thing I want to do

28
00:01:24,370 --> 00:01:26,960
is to show you how to sign an image

29
00:01:26,960 --> 00:01:28,340
and push it to a registry,

30
00:01:28,340 --> 00:01:29,860
and for this lesson,

31
00:01:29,860 --> 00:01:33,080
we're just going to use Docker Hub for our registry.

32
00:01:33,080 --> 00:01:35,780
So I'm going to go ahead and do a docker login

33
00:01:35,780 --> 00:01:37,283
to log in to Docker Hub.

34
00:01:39,750 --> 00:01:41,970
Now that I'm logged into Docker Hub,

35
00:01:41,970 --> 00:01:44,170
I need to create what's called a trust key

36
00:01:44,170 --> 00:01:45,990
or a delegation key pair,

37
00:01:45,990 --> 00:01:49,960
and this is basically a key that identifies me as a user.

38
00:01:49,960 --> 00:01:52,150
I'm just going to make sure that I'm in my home directory

39
00:01:52,150 --> 00:01:54,137
with the cd ~/

40
00:01:55,380 --> 00:01:58,610
and then I can generate my trust key

41
00:01:58,610 --> 00:02:01,660
just with this command docker trust key generate

42
00:02:02,910 --> 00:02:05,450
and then I will enter my Docker Hub username.

43
00:02:05,450 --> 00:02:07,090
So if you're following along,

44
00:02:07,090 --> 00:02:09,470
you will need an account on Docker Hub,

45
00:02:09,470 --> 00:02:12,100
you can find a link to Docker Hub down below the video

46
00:02:12,100 --> 00:02:14,200
if you need to create an account,

47
00:02:14,200 --> 00:02:15,390
but if you're following along,

48
00:02:15,390 --> 00:02:17,900
you'll need to enter your Docker Hub username here.

49
00:02:17,900 --> 00:02:22,390
Mine is willbla, I'm going to go ahead and run that

50
00:02:22,390 --> 00:02:24,780
and I need to enter a passphrase,

51
00:02:24,780 --> 00:02:27,480
and then I need to reenter that passphrase.

52
00:02:27,480 --> 00:02:30,340
Now make sure that you make a note of that passphrase

53
00:02:30,340 --> 00:02:32,340
because you will need it later.

54
00:02:32,340 --> 00:02:34,463
So now I've generated my trust key.

55
00:02:35,310 --> 00:02:36,630
So the next thing I'm going to do

56
00:02:36,630 --> 00:02:39,880
is I'm going to add myself as a signer

57
00:02:39,880 --> 00:02:43,700
to a new repository in Docker Hub.

58
00:02:43,700 --> 00:02:48,430
So I can do that with the docker trust signer add command

59
00:02:49,790 --> 00:02:51,480
and I need to pass in my --key

60
00:02:53,480 --> 00:02:55,730
and there's a file here in my home directory.

61
00:02:55,730 --> 00:02:57,540
This file was actually generated

62
00:02:57,540 --> 00:03:01,520
by that last command that we ran and it's willbla.pub.

63
00:03:01,520 --> 00:03:04,740
That's my public key, so I'm going to go ahead

64
00:03:04,740 --> 00:03:08,350
and specify that as the key file,

65
00:03:08,350 --> 00:03:11,180
then I need to enter my Docker Hub username,

66
00:03:11,180 --> 00:03:13,580
so that's just going to be willbla.

67
00:03:13,580 --> 00:03:14,810
Again, you're going to need

68
00:03:14,810 --> 00:03:17,503
to enter your Docker Hub username there,

69
00:03:19,100 --> 00:03:21,350
and then I'll enter the repository name.

70
00:03:21,350 --> 00:03:24,250
So I'll just make this a personal repository.

71
00:03:24,250 --> 00:03:28,330
So I will prefix that with my Docker Hub username here

72
00:03:28,330 --> 00:03:33,070
followed by a forward slash, and I'll just call it dct-test

73
00:03:34,710 --> 00:03:37,523
because we're just testing Docker Content Trust.

74
00:03:40,170 --> 00:03:44,140
So when I run that, it's going to ask me for a passphrase

75
00:03:44,140 --> 00:03:46,020
for the root key here.

76
00:03:46,020 --> 00:03:50,080
So I'll need to create this new passphrase and repeat it

77
00:03:50,080 --> 00:03:52,430
and then I'll need to create a passphrase

78
00:03:52,430 --> 00:03:54,893
for the repository key as well.

79
00:03:58,070 --> 00:04:00,150
Now that I've created my passphrases,

80
00:04:00,150 --> 00:04:03,720
I have successfully added myself as a signer

81
00:04:03,720 --> 00:04:05,333
to this repository.

82
00:04:06,180 --> 00:04:08,480
So now that I've added myself as a signer,

83
00:04:08,480 --> 00:04:11,350
let's go ahead and just create an image

84
00:04:11,350 --> 00:04:13,180
that we can use for testing.

85
00:04:13,180 --> 00:04:16,570
I'll just make a directory here called dct-test

86
00:04:18,040 --> 00:04:22,510
and then I'll change directory into that new directory

87
00:04:22,510 --> 00:04:24,580
and I'll create a Dockerfile.

88
00:04:24,580 --> 00:04:28,230
So we'll just create a very simple image here.

89
00:04:28,230 --> 00:04:31,110
I'll just do FROM busybox:latest

90
00:04:32,200 --> 00:04:36,620
and for my CMD, I'll just print a message to the screen.

91
00:04:36,620 --> 00:04:38,930
So we'll just print the message, It worked!

92
00:04:38,930 --> 00:04:40,070
So a very simple image,

93
00:04:40,070 --> 00:04:42,300
we're just going to use this for testing.

94
00:04:42,300 --> 00:04:45,270
So now let's go ahead and build our image here

95
00:04:45,270 --> 00:04:50,270
and I'm going to give it a tag and it will be that

96
00:04:50,320 --> 00:04:54,530
repository that I added myself to as a signer, my Docker Hub

97
00:04:54,530 --> 00:04:58,012
username, of course you'll need to use your Docker Hub

98
00:04:58,012 --> 00:05:01,043
username, /dct-test and I'll give it a tag here, :unsigned.

99
00:05:05,210 --> 00:05:07,810
Nothing special about that tag name,

100
00:05:07,810 --> 00:05:10,080
just a descriptive tag name.

101
00:05:10,080 --> 00:05:13,010
We're going to create an unsigned version of this image.

102
00:05:13,010 --> 00:05:14,870
So I'm just going to call it unsigned

103
00:05:14,870 --> 00:05:16,820
just so we know what it is.

104
00:05:17,810 --> 00:05:21,423
Then space and a dot to build from the current directory.

105
00:05:23,310 --> 00:05:24,990
So we're going to push this image

106
00:05:24,990 --> 00:05:27,260
to Docker Hub without signing it,

107
00:05:27,260 --> 00:05:30,670
so it's just going to be a regular unsigned image

108
00:05:30,670 --> 00:05:31,723
in Docker Hub.

109
00:05:33,790 --> 00:05:35,993
We'll just do a docker push.

110
00:05:41,350 --> 00:05:44,810
So now we have an unsigned version of that image.

111
00:05:44,810 --> 00:05:47,090
The reason I'm creating an unsigned image here

112
00:05:47,090 --> 00:05:50,520
is because I want to show you how Docker Content Trust

113
00:05:50,520 --> 00:05:53,670
behaves with both signed and unsigned images.

114
00:05:53,670 --> 00:05:57,083
So we're going to start with just a normal unsigned image

115
00:05:58,100 --> 00:05:59,910
here. So now that I've built my image,

116
00:05:59,910 --> 00:06:01,800
let's just go ahead and run it

117
00:06:01,800 --> 00:06:03,763
just to make sure that it works,

118
00:06:08,060 --> 00:06:12,100
and we can see my output here, it just says, It worked!,

119
00:06:12,100 --> 00:06:14,700
which is our output that we put in our command

120
00:06:14,700 --> 00:06:15,533
in the Dockerfile.

121
00:06:15,533 --> 00:06:17,703
So it looks like my image runs just fine.

122
00:06:18,620 --> 00:06:20,770
So this is an unsigned image.

123
00:06:20,770 --> 00:06:22,010
So let's see what happens

124
00:06:22,010 --> 00:06:25,800
when we enable DOCKER_CONTENT_TRUST.

125
00:06:25,800 --> 00:06:27,800
So I'm going to show you how to do that now,

126
00:06:29,350 --> 00:06:32,650
and all I need to do is set this environment variable

127
00:06:32,650 --> 00:06:35,550
called DOCKER_CONTENT_TRUST.

128
00:06:35,550 --> 00:06:38,160
If I set that variable equal to 1,

129
00:06:38,160 --> 00:06:41,130
Docker Content Trust is now enabled.

130
00:06:41,130 --> 00:06:44,323
So let's see what happens if I do this docker run again.

131
00:06:45,980 --> 00:06:50,720
This time it says, No valid trust data for my unsigned tag.

132
00:06:50,720 --> 00:06:54,040
Essentially, what it's saying is, this image is unsigned.

133
00:06:54,040 --> 00:06:56,530
There's no signature data available,

134
00:06:56,530 --> 00:06:59,710
therefore it's not going to run that image

135
00:06:59,710 --> 00:07:02,623
because DOCKER_CONTENT_TRUST is enabled.

136
00:07:03,560 --> 00:07:04,870
So now I'm going to go ahead

137
00:07:04,870 --> 00:07:07,580
and show you how we can sign our images.

138
00:07:07,580 --> 00:07:11,260
So I'm just going to do another docker build -t,

139
00:07:11,260 --> 00:07:16,260
my Docker Hub username, /dct-test

140
00:07:16,310 --> 00:07:18,400
and we'll create a tag called :signed.

141
00:07:18,400 --> 00:07:21,420
Again, just a descriptive name there,

142
00:07:21,420 --> 00:07:25,093
just so we know that this is a signed version of our image.

143
00:07:26,910 --> 00:07:29,610
I'm just going to rebuild that image with a different tag

144
00:07:31,130 --> 00:07:32,670
and I can sign it with

145
00:07:32,670 --> 00:07:37,670
docker trust sign willbla/dct-test:signed.

146
00:07:40,550 --> 00:07:43,970
Now be aware, the docker trust sign command

147
00:07:43,970 --> 00:07:46,690
also pushes the image to the registry.

148
00:07:46,690 --> 00:07:50,420
So this command is going to generate a signature

149
00:07:50,420 --> 00:07:52,400
and it will push the signature data

150
00:07:52,400 --> 00:07:56,080
as well as the image itself to Docker Hub.

151
00:07:56,080 --> 00:07:58,470
So it's basically like docker push,

152
00:07:58,470 --> 00:08:00,623
but it also signs the image.

153
00:08:02,800 --> 00:08:04,630
Now, when I'm signing my image

154
00:08:04,630 --> 00:08:06,580
I do need to enter my passphrase.

155
00:08:06,580 --> 00:08:10,450
This is the first passphrase that we created in this lesson

156
00:08:10,450 --> 00:08:14,620
when we used that docker trust key generate command.

157
00:08:14,620 --> 00:08:16,360
So enter that passphrase

158
00:08:16,360 --> 00:08:20,060
and our image was successfully signed and pushed.

159
00:08:20,060 --> 00:08:23,583
Now, let's see what happens when we try to run that image.

160
00:08:28,120 --> 00:08:33,120
I'll run willbla/dct-test and the signed tag,

161
00:08:36,270 --> 00:08:38,480
and sure enough, we see our output.

162
00:08:38,480 --> 00:08:40,800
We were able to successfully run that image

163
00:08:40,800 --> 00:08:44,100
because it is properly signed.

164
00:08:44,100 --> 00:08:46,360
Another interesting thing to note is

165
00:08:46,360 --> 00:08:49,380
when you have Docker Content Trust enabled

166
00:08:49,380 --> 00:08:53,210
with that DOCKER_CONTENT_TRUST environment variable,

167
00:08:53,210 --> 00:08:55,900
when you do a regular docker push,

168
00:08:55,900 --> 00:08:58,140
it will automatically sign the image.

169
00:08:58,140 --> 00:09:01,570
So when DOCKER_CONTENT_TRUST is set to 1,

170
00:09:01,570 --> 00:09:03,650
docker push pretty much behaves

171
00:09:03,650 --> 00:09:06,810
exactly like docker trust sign.

172
00:09:06,810 --> 00:09:09,600
So with Docker Content Trust enabled,

173
00:09:09,600 --> 00:09:12,450
we were unable to run the unsigned image

174
00:09:12,450 --> 00:09:15,473
but we were able to run the signed image.

175
00:09:16,550 --> 00:09:19,933
Now let's disable DOCKER_CONTENT_TRUST,

176
00:09:21,970 --> 00:09:23,070
and that's easy to do.

177
00:09:23,070 --> 00:09:26,563
We just need to set that environment variable back to 0.

178
00:09:27,460 --> 00:09:29,093
Now that it's disabled,

179
00:09:31,290 --> 00:09:36,290
I can do a docker run willbla/dct-test on my unsigned image.

180
00:09:39,240 --> 00:09:42,210
So with Docker Content Trust disabled,

181
00:09:42,210 --> 00:09:46,490
we can run both signed and unsigned images on our host.

182
00:09:46,490 --> 00:09:50,290
So we talked a little bit about what Docker Content Trust is

183
00:09:50,290 --> 00:09:51,790
and what it does.

184
00:09:51,790 --> 00:09:54,210
I showed you how to sign your Docker images

185
00:09:54,210 --> 00:09:57,130
and then I demonstrated how to enable and disable

186
00:09:57,130 --> 00:09:59,570
Docker Content Trust on your system

187
00:09:59,570 --> 00:10:02,260
and we experimented a little bit with

188
00:10:02,260 --> 00:10:06,300
what happens when we try to run signed and unsigned images

189
00:10:06,300 --> 00:10:09,720
with Docker Content Trust enabled and disabled.

190
00:10:09,720 --> 00:10:12,028
That's all for this lesson. See you in the next one.


1
00:00:01,050 --> 00:00:02,790
Hello, and welcome to this lesson

2
00:00:02,790 --> 00:00:06,570
on default Docker engine security. We're going to be talking

3
00:00:06,570 --> 00:00:10,830
about some of the basic security features that come packaged

4
00:00:10,830 --> 00:00:11,663
with Docker.

5
00:00:11,663 --> 00:00:14,530
These are just a few concepts that you need to

6
00:00:14,530 --> 00:00:16,510
be generally familiar with

7
00:00:16,510 --> 00:00:19,710
for the Docker Certified Associate exam.

8
00:00:19,710 --> 00:00:21,030
So I want to start by talking

9
00:00:21,030 --> 00:00:23,450
about namespaces and control groups.

10
00:00:23,450 --> 00:00:26,190
Now we've already talked about namespaces

11
00:00:26,190 --> 00:00:29,230
and control groups previously in this course,

12
00:00:29,230 --> 00:00:32,160
but I want to talk about what these 2 concepts have

13
00:00:32,160 --> 00:00:35,570
to do specifically with security.

14
00:00:35,570 --> 00:00:39,210
Namespaces and control groups primarily influence security

15
00:00:39,210 --> 00:00:42,535
by providing isolation to containers.

16
00:00:42,535 --> 00:00:46,450
Isolation means that container processes cannot

17
00:00:46,450 --> 00:00:50,030
see or affect other containers or processes that

18
00:00:50,030 --> 00:00:51,940
are running directly on the host.

19
00:00:51,940 --> 00:00:54,570
So container isolation basically just means

20
00:00:54,570 --> 00:00:57,540
that what's going on inside the container can't

21
00:00:57,540 --> 00:01:00,870
affect things that are going on outside the container.

22
00:01:00,870 --> 00:01:03,950
So how does this isolation that is provided

23
00:01:03,950 --> 00:01:07,490
through namespaces and control groups, influence security?

24
00:01:07,490 --> 00:01:10,297
Well, isolation limits the impact

25
00:01:10,297 --> 00:01:14,140
of exploits and privilege escalation attacks.

26
00:01:14,140 --> 00:01:17,984
So if an attacker is able to influence your container

27
00:01:17,984 --> 00:01:21,010
or gain control of your container through some kind

28
00:01:21,010 --> 00:01:23,971
of exploit or vulnerability in the container,

29
00:01:23,971 --> 00:01:28,680
isolation limits their ability to utilize that control

30
00:01:28,680 --> 00:01:30,830
to gain control of other containers

31
00:01:30,830 --> 00:01:34,540
or potentially to gain control of the host itself.

32
00:01:34,540 --> 00:01:37,960
So with that isolation, if a container is compromised,

33
00:01:37,960 --> 00:01:40,620
it's much more difficult for an attacker

34
00:01:40,620 --> 00:01:42,800
to utilize that level of control

35
00:01:42,800 --> 00:01:45,013
that they've gained inside the container to

36
00:01:45,013 --> 00:01:48,980
gain any further control outside the container.

37
00:01:48,980 --> 00:01:50,530
Another thing you need to be aware

38
00:01:50,530 --> 00:01:53,090
of when it comes to security with regard

39
00:01:53,090 --> 00:01:57,270
to the Docker engine is the Docker daemon attack surface.

40
00:01:57,270 --> 00:01:59,800
The Docker daemon itself that is running

41
00:01:59,800 --> 00:02:02,760
on your host presents an attack surface

42
00:02:02,760 --> 00:02:05,850
that could be vulnerable if you leave it exposed.

43
00:02:05,850 --> 00:02:09,680
So it's important to understand how the Docker daemon works

44
00:02:09,680 --> 00:02:12,918
and ensure that you don't give anything or anyone access

45
00:02:12,918 --> 00:02:16,450
to it that shouldn't have that access because

46
00:02:16,450 --> 00:02:20,970
the Docker daemon itself does require root privileges.

47
00:02:20,970 --> 00:02:23,120
Essentially, what that means is

48
00:02:23,120 --> 00:02:26,980
if someone is able to gain control of your Docker daemon

49
00:02:26,980 --> 00:02:31,630
or they're able to execute things using your Docker daemon,

50
00:02:31,630 --> 00:02:34,090
they may be able to use that control

51
00:02:34,090 --> 00:02:36,500
in order to escalate their privileges

52
00:02:36,500 --> 00:02:39,090
and gain further control of your systems.

53
00:02:39,090 --> 00:02:40,570
So that is something that

54
00:02:40,570 --> 00:02:44,210
in the security world we refer to as an attack surface.

55
00:02:44,210 --> 00:02:48,174
It's something that a malicious person may desire to attack

56
00:02:48,174 --> 00:02:52,730
in order to accomplish whatever their malicious goals are.

57
00:02:52,730 --> 00:02:55,360
So with that in mind, it is very important

58
00:02:55,360 --> 00:03:00,360
to only allow trusted users access to the Docker daemon.

59
00:03:00,730 --> 00:03:04,340
We talked earlier about how to give individual users access

60
00:03:04,340 --> 00:03:06,060
to run Docker commands,

61
00:03:06,060 --> 00:03:09,520
and you want to make sure that you don't give that access

62
00:03:09,520 --> 00:03:11,220
to anyone that shouldn't have it.

63
00:03:11,220 --> 00:03:15,770
That includes both human users and automated processes.

64
00:03:15,770 --> 00:03:18,650
So for example, if you're building some automation

65
00:03:18,650 --> 00:03:21,320
that's able to interact with the Docker daemon,

66
00:03:21,320 --> 00:03:24,010
just be aware that there needs to be some scrutiny

67
00:03:24,010 --> 00:03:26,180
around that with regard to security,

68
00:03:26,180 --> 00:03:29,190
because you don't want an attacker to be able to

69
00:03:29,190 --> 00:03:31,700
gain control of the daemon through whatever users

70
00:03:31,700 --> 00:03:35,486
or processes are given access to that.

71
00:03:35,486 --> 00:03:37,190
The final thing I want to talk

72
00:03:37,190 --> 00:03:41,500
about in this lesson is Linux kernel capabilities.

73
00:03:41,500 --> 00:03:45,410
Capabilities are a concept within the Linux kernel,

74
00:03:45,410 --> 00:03:47,610
and essentially what capabilities do is they

75
00:03:47,610 --> 00:03:50,286
allow you to give fine-grained control

76
00:03:50,286 --> 00:03:53,550
to entities within the Linux environment.

77
00:03:53,550 --> 00:03:56,100
Docker utilizes these capabilities

78
00:03:56,100 --> 00:04:00,840
to fine tune what containers and processes can access.

79
00:04:00,840 --> 00:04:03,270
So namespaces and control groups have a lot

80
00:04:03,270 --> 00:04:07,610
of influence over what those container processes can access

81
00:04:07,610 --> 00:04:11,810
and capabilities can be used to grant specific abilities

82
00:04:11,810 --> 00:04:15,253
to containers without granting unnecessary

83
00:04:15,253 --> 00:04:17,390
additional abilities.

84
00:04:17,390 --> 00:04:19,670
Capabilities are not generally something

85
00:04:19,670 --> 00:04:21,230
that you need to be aware of

86
00:04:21,230 --> 00:04:23,160
when you're actually using Docker,

87
00:04:23,160 --> 00:04:26,320
but for the purposes of the exam, you need to be aware

88
00:04:26,320 --> 00:04:29,132
that Docker uses capabilities internally

89
00:04:29,132 --> 00:04:31,840
in order to securely provide some

90
00:04:31,840 --> 00:04:33,500
of its functionality.

91
00:04:33,500 --> 00:04:35,544
Specifically, it uses capabilities

92
00:04:35,544 --> 00:04:38,350
to grant fine-grained abilities

93
00:04:38,350 --> 00:04:40,916
to container processes without the need

94
00:04:40,916 --> 00:04:44,570
for those processes to run as root.

95
00:04:44,570 --> 00:04:48,830
So I'll give you an example. In a typical Linux environment,

96
00:04:48,830 --> 00:04:52,220
you have just to run as root in order to listen

97
00:04:52,220 --> 00:04:55,530
on a port below 1024,

98
00:04:55,530 --> 00:04:58,800
but we have run containers throughout this course

99
00:04:58,800 --> 00:05:03,540
that for example, nginx containers, that listen on port 80.

100
00:05:03,540 --> 00:05:05,490
Normally you would have to run as root

101
00:05:05,490 --> 00:05:07,090
in order to do that.

102
00:05:07,090 --> 00:05:10,140
But Docker is able to use capabilities to

103
00:05:10,140 --> 00:05:15,140
grant a container process the ability to listen on a port

104
00:05:15,540 --> 00:05:19,340
below 1024 without having to run as root.

105
00:05:19,340 --> 00:05:20,823
So that's just an example

106
00:05:20,823 --> 00:05:24,760
of how Docker uses those fine-grained capabilities to

107
00:05:24,760 --> 00:05:27,934
give some kind of access to a process

108
00:05:27,934 --> 00:05:31,830
without having to allow that process to run as root.

109
00:05:31,830 --> 00:05:33,670
So, as you can imagine

110
00:05:33,670 --> 00:05:36,410
that's pretty important from a security standpoint

111
00:05:36,410 --> 00:05:39,730
because it allows the container process to do what

112
00:05:39,730 --> 00:05:43,780
it needs to do, without granting unnecessary privileges.

113
00:05:43,780 --> 00:05:47,210
So we've talked about a few general concepts

114
00:05:47,210 --> 00:05:49,220
that you may need to be aware of for

115
00:05:49,220 --> 00:05:51,510
the Docker Certified Associate exam.

116
00:05:51,510 --> 00:05:54,900
We talked about the relationship between namespaces

117
00:05:54,900 --> 00:05:59,159
and control groups and how they provide security isolation.

118
00:05:59,159 --> 00:06:02,400
We talked about the Docker daemon attack surface

119
00:06:02,400 --> 00:06:05,980
and how you should be cautious when granting any user

120
00:06:05,980 --> 00:06:08,690
or process access to the Docker daemon,

121
00:06:08,690 --> 00:06:11,592
and we also talked about Linux capabilities

122
00:06:11,592 --> 00:06:16,040
and how Docker uses those to grant fine-grained permission

123
00:06:16,040 --> 00:06:20,220
to container processes without giving them root access.

124
00:06:20,220 --> 00:06:21,470
That's all for this lesson.

125
00:06:21,470 --> 00:06:22,670
See you in the next one.

